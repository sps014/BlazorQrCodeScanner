@page "/"
@using BlazorQrCodeScanner
@using System.Drawing
@using BlazorQrCodeScanner.MediaTrack

<QrCodeScanner @ref="qrCodeScanner" Style="display: flex;align-items:center;justify-content:center;overflow: hidden !important;" Width="100%" Height="100vh" OnCreated="InstanceCreated"
               OnScannerStarted="ScanStarted" OnQrSuccess="GetResult">
	@if (scannerStarted)
	{
		<div id="yellowFrame" style="position:fixed;z-index:2;width:100vw;height:150px;background-color:transparent;outline:2px solid yellow;">
		</div>
	}
</QrCodeScanner>

<img src="@img" width="100%" />
@* <InputFile OnChange="FileOpen" />
 *@
@code
{
	private QrCodeScanner? qrCodeScanner;
	private bool scannerStarted;
	string img;

	protected override async Task OnInitializedAsync()
	{
		if (await Permissions.CheckStatusAsync<Permissions.Camera>()!=PermissionStatus.Granted)
			await Permissions.RequestAsync<Permissions.Camera>();
		await base.OnInitializedAsync();
	}
	private void InstanceCreated()
	{
		qrCodeScanner?.StartAsync(new MediaTrackConstraintSet
			{
				FacingMode = VideoFacingMode.Environment
			}, new QrCodeConfig()
		{
			FormatsToSupport =[BarcodeType.QR_CODE],
			QrBox = new QrBoxFunction("calculateBoundingBox"),
			ExperimentalFeatures = new ExperimentalFeaturesConfig()
			{
				UseBarCodeDetectorIfSupported = true
			},
			DefaultZoomValueIfSupported = 2,
			Fps = 10
		});
	}

	private void GetResult(QrCodeScanResult e)
	{
		Console.WriteLine(e.DecodedText);
		img = e.ImageUrl;
		StateHasChanged();
	}

	private void ScanStarted()
	{
		scannerStarted = true;
		StateHasChanged();

	}
	
}